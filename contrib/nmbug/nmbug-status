#!/usr/bin/python
#
# Copyright (c) 2011-2012 David Bremner <david@tethera.net>
# License: Same as notmuch
# dependencies
#       - python 2.6 for json
#       - argparse; either python 2.7, or install separately

import datetime
import notmuch
import rfc822
import urllib
import json
import argparse
import os
import subprocess

# parse command line arguments

parser = argparse.ArgumentParser()
parser.add_argument('--text', help='output plain text format',
                    action='store_true')

parser.add_argument('--config', help='load config from given file')


args = parser.parse_args()

# read config from json file

if args.config != None:
    fp = open(args.config)
else:
    nmbhome = os.getenv('NMBGIT', os.path.expanduser('~/.nmbug'))

    # read only the first line from the pipe
    sha1 = subprocess.Popen(['git', '--git-dir', nmbhome,
                             'show-ref', '-s', 'config'],
                            stdout=subprocess.PIPE).stdout.readline()

    sha1 = sha1.rstrip()

    fp = subprocess.Popen(['git', '--git-dir', nmbhome,
                           'cat-file', 'blob', sha1+':status-config.json'],
                          stdout=subprocess.PIPE).stdout

config = json.load(fp)

if args.text:
    output_format = 'text'
else:
    output_format = 'html'

headers = ['date', 'from', 'subject']
last = {}

def clear_last():
    for header in headers:
        last[header] = ''

def print_view(title, query, comment):

    query_string = ' and '.join(query)
    q_new = notmuch.Query(db, query_string)
    q_new.set_sort(notmuch.Query.SORT.OLDEST_FIRST)

    last['thread_id'] = ''

    if output_format == 'html':
        print '<h3>%s</h3>' % title
        print comment
        print 'The view is generated from the following query:'
        print '<blockquote>'
        print query_string
        print '</blockquote>'
        print '<table>\n'

    for m in q_new.search_messages():

        out = {}

        thread_id = m.get_thread_id()
        if thread_id != last['thread_id']:
            clear_last()

        for header in headers:
            val = m.get_header(header)

            if header == 'date':
                val = str.join(' ', val.split(None)[1:4])
                val = str(datetime.datetime.strptime(val, '%d %b %Y').date())
            elif header == 'from':
                val = rfc822.parseaddr(val)[0]

            if last[header] == val:
                out[header] = ''
            else:
                out[header] = val.encode('utf-8')
                last[header] = val

        mid = m.get_message_id()
        out['id'] = 'id:"%s"' % mid

        if output_format == 'html':
            # XXX using <br /> is a hack, but ... // 20111216 too
            if thread_id != last['thread_id']:
                br = '<br />'
            else:
                br = ''

            out['subject'] = '<a href="http://mid.gmane.org/%s">%s</a>' \
                % (urllib.quote(mid), out['subject'])

            print ' <tr><td>%s %s' % (br, out['date'])
            print '</td><td>%s %s' % (br, out['id'])
            print '</td></tr>'
            print ' <tr><td>%s' % out['from']
            print '</td><td>%s' % out['subject']
            print '</td></tr>\n'
        else:
            print '%(date)-10.10s %(from)-20.20s %(subject)-40.40s\n%(id)72s\n' % out

        last['thread_id'] = thread_id

    if output_format == 'html':
        print '</table>'

# main program

db = notmuch.Database(mode=notmuch.Database.MODE.READ_WRITE)

if output_format == 'html':
    print '''<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Notmuch Patches</title>
</head>
<body>'''
    print '<h2>Notmuch Patches</h2>'
    print 'Generated: %s<br />' % datetime.datetime.utcnow().date()
    print 'For more infomation see <a href="http://notmuchmail.org/nmbug">nmbug</a>'

for view in config['views']:
    print_view(**view)

if output_format == 'html':
    print '</body>\n</html>'
